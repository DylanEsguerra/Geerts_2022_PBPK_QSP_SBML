#!/usr/bin/env python3
"""
Parameter Analysis Pipeline for PBPK/QSP Model

This script coordinates the parameter analysis process:
1. Identifies missing parameters in ODEs compared to parameter file
2. Categorizes parameters (missing, used, unused, aggregation rates)
3. Documents parameter replacements for substitution
4. Generates comprehensive reports

Usage:
    python analyze_parameters.py [antibody_name]

Where antibody_name is the name of the antibody to analyze (Gant or Lec)
If not provided, default is "Gant"
"""

import os
import sys
import pandas as pd
from identify_missing_parameters import identify_parameters
import subprocess

def run_parameter_analysis(antibody_name="Gant"):
    """
    Run the complete parameter analysis pipeline
    
    Args:
        antibody_name: Name of the antibody to analyze (Gant or Lec)
    """
    print(f"Starting parameter analysis for antibody: {antibody_name}")
    
    # Create parameter analysis directory if it doesn't exist
    os.makedirs('parameter_analysis', exist_ok=True)
    
    # 1. First run the identify_parameters function
    print("\nStep 1: Identifying parameters from ODEs...")
    parameters, existing_params, missing_params, aggregation_params, parameter_usage = identify_parameters(antibody_name)
    
    # 2. Run generate_model_1.py which also creates parameter files
    print("\nStep 2: Running model generation to analyze parameter usage...")
    subprocess.run([sys.executable, 'generate_model_1.py'], input=antibody_name.encode(), check=True)
    
    # 3. Combine and enhance the reports
    print("\nStep 3: Generating comprehensive parameter report...")
    generate_comprehensive_report(antibody_name)
    
    # Display summary of results
    print("\nParameter Analysis Complete")
    print(f"Total parameters in equations: {len(parameters)}")
    print(f"Parameters with values in QSP file: {len(existing_params)}")
    print(f"Missing parameters: {len(missing_params)}")
    print(f"Aggregation rate parameters: {len(aggregation_params)}")
    print("\nResults saved to parameter_analysis directory:")
    print(" - missing_parameters.csv: Parameters in equations but not in QSP file")
    print(" - aggregation_rate_parameters.csv: Parameters generated by K_rates_extrapolate.py")
    print(" - unused_parameters.csv: Parameters in QSP file but not used in equations")
    print(" - parameter_report.txt: Comprehensive parameter analysis")

def generate_comprehensive_report(antibody_name):
    """Generate a comprehensive parameter report by combining information from all sources"""
    
    report_content = f"""
===============================================================
Comprehensive Parameter Analysis Report for {antibody_name}
===============================================================

This report provides an overview of all parameters in the PBPK/QSP model:
1. Parameters used in the model and present in the QSP parameter file
2. Parameters used but missing from the QSP parameter file
3. Parameters that are handled by special aggregation rate extrapolation
4. Parameters in the QSP file but not used in the model

"""
    
    # Add information about missing parameters
    try:
        missing_df = pd.read_csv('parameter_analysis/missing_parameters.csv')
        report_content += f"\n1. MISSING PARAMETERS: {len(missing_df)}\n"
        report_content += "   These parameters are used in ODEs but missing from the QSP parameter file\n\n"
        
        # Parameters with replacements
        replacements = missing_df[missing_df['replacement'].notna() & (missing_df['replacement'] != "")]
        if not replacements.empty:
            report_content += f"   1.1 Parameters with replacements: {len(replacements)}\n"
            for _, row in replacements.iterrows():
                report_content += f"       {row['name']} - Used in: {row['equations_used_in']} - Replaced by: {row['replacement']}\n"
        
        # Parameters without replacements
        no_replacements = missing_df[(missing_df['replacement'].isna()) | (missing_df['replacement'] == "")]
        if not no_replacements.empty:
            report_content += f"\n   1.2 Parameters without replacements: {len(no_replacements)}\n"
            for _, row in no_replacements.iterrows():
                report_content += f"       {row['name']} - Used in: {row['equations_used_in']}\n"
    except Exception as e:
        report_content += f"\nError processing missing parameters: {str(e)}\n"
    
    # Add information about aggregation rate parameters
    try:
        agg_df = pd.read_csv('parameter_analysis/aggregation_rate_parameters.csv')
        report_content += f"\n2. AGGREGATION RATE PARAMETERS: {len(agg_df)}\n"
        report_content += "   These parameters are generated by K_rates_extrapolate.py\n\n"
        
        # Group by type and species
        for species in ["AB40", "AB42"]:
            report_content += f"   2.1 {species} Parameters:\n"
            for param_type in ["Oligomer", "Fibril", "Transition"]:
                type_params = agg_df[agg_df['type'].str.contains(f"{species} {param_type}")]
                if not type_params.empty:
                    report_content += f"       - {param_type}: {len(type_params)} parameters\n"
    except Exception as e:
        report_content += f"\nError processing aggregation parameters: {str(e)}\n"
    
    # Add information about unused parameters
    try:
        unused_df = pd.read_csv('parameter_analysis/unused_parameters.csv')
        report_content += f"\n3. UNUSED PARAMETERS: {len(unused_df)}\n"
        report_content += "   These parameters are in the QSP parameter file but not used in any ODE\n\n"
        
        # Group by general parameter types
        pk_params = unused_df[unused_df['name'].str.contains('PK_|CL_|Vcent_|Vper_')]
        if not pk_params.empty:
            report_content += f"   3.1 Pharmacokinetic Parameters: {len(pk_params)}\n"
            for _, row in pk_params.iterrows():
                desc = row['description'] if pd.notna(row['description']) else ""
                report_content += f"       {row['name']} - {desc}\n"
        
        ab_params = unused_df[unused_df['name'].str.contains('AB|Abeta|_Plaque_|_Oligomer|_Fibril')]
        if not ab_params.empty:
            report_content += f"\n   3.2 Amyloid Beta Parameters: {len(ab_params)}\n"
            for _, row in ab_params.iterrows():
                desc = row['description'] if pd.notna(row['description']) else ""
                report_content += f"       {row['name']} - {desc}\n"
    except Exception as e:
        report_content += f"\nError processing unused parameters: {str(e)}\n"
    
    # Write the report
    with open('parameter_analysis/parameter_report.txt', 'w') as f:
        f.write(report_content)
    
    print(f"Comprehensive report saved to parameter_analysis/parameter_report.txt")

if __name__ == "__main__":
    # Get antibody name from command line argument or use default
    antibody_name = sys.argv[1] if len(sys.argv) > 1 else "Gant"
    run_parameter_analysis(antibody_name) 